/*
 * Employee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EmployeeDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for employeesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Obsah nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return employeesGetCall(_callback);

    }

    /**
     * Vrátí všechny zaměstnance
     * 
     * @return List&lt;EmployeeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Obsah nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public List<EmployeeDTO> employeesGet() throws ApiException {
        ApiResponse<List<EmployeeDTO>> localVarResp = employeesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Vrátí všechny zaměstnance
     * 
     * @return ApiResponse&lt;List&lt;EmployeeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Obsah nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EmployeeDTO>> employeesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = employeesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<EmployeeDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Vrátí všechny zaměstnance (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Obsah nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesGetAsync(final ApiCallback<List<EmployeeDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<EmployeeDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employeesIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeesIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling employeesIdDelete(Async)");
        }

        return employeesIdDeleteCall(id, _callback);

    }

    /**
     * Smaže zaměstnance podle ID
     * 
     * @param id  (required)
     * @return EmployeeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeDTO employeesIdDelete(Integer id) throws ApiException {
        ApiResponse<EmployeeDTO> localVarResp = employeesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Smaže zaměstnance podle ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;EmployeeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmployeeDTO> employeesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = employeesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Smaže zaměstnance podle ID (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesIdDeleteAsync(Integer id, final ApiCallback<EmployeeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employeesIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling employeesIdGet(Async)");
        }

        return employeesIdGetCall(id, _callback);

    }

    /**
     * Vrátí zaměstnance podle ID
     * 
     * @param id  (required)
     * @return EmployeeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeDTO employeesIdGet(Integer id) throws ApiException {
        ApiResponse<EmployeeDTO> localVarResp = employeesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Vrátí zaměstnance podle ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;EmployeeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmployeeDTO> employeesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = employeesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Vrátí zaměstnance podle ID (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Zaměstnanec nenalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesIdGetAsync(Integer id, final ApiCallback<EmployeeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employeesIdPut
     * @param id  (required)
     * @param employeeDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Zaměstnanec s daným ID nebyl nalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesIdPutCall(Integer id, EmployeeDTO employeeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDTO;

        // create path and map variables
        String localVarPath = "/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeesIdPutValidateBeforeCall(Integer id, EmployeeDTO employeeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling employeesIdPut(Async)");
        }

        // verify the required parameter 'employeeDTO' is set
        if (employeeDTO == null) {
            throw new ApiException("Missing the required parameter 'employeeDTO' when calling employeesIdPut(Async)");
        }

        return employeesIdPutCall(id, employeeDTO, _callback);

    }

    /**
     * Aktualizuje zaměstnance
     * 
     * @param id  (required)
     * @param employeeDTO  (required)
     * @return EmployeeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Zaměstnanec s daným ID nebyl nalezen </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeDTO employeesIdPut(Integer id, EmployeeDTO employeeDTO) throws ApiException {
        ApiResponse<EmployeeDTO> localVarResp = employeesIdPutWithHttpInfo(id, employeeDTO);
        return localVarResp.getData();
    }

    /**
     * Aktualizuje zaměstnance
     * 
     * @param id  (required)
     * @param employeeDTO  (required)
     * @return ApiResponse&lt;EmployeeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Zaměstnanec s daným ID nebyl nalezen </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmployeeDTO> employeesIdPutWithHttpInfo(Integer id, EmployeeDTO employeeDTO) throws ApiException {
        okhttp3.Call localVarCall = employeesIdPutValidateBeforeCall(id, employeeDTO, null);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Aktualizuje zaměstnance (asynchronously)
     * 
     * @param id  (required)
     * @param employeeDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Zaměstnanec s daným ID nebyl nalezen </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesIdPutAsync(Integer id, EmployeeDTO employeeDTO, final ApiCallback<EmployeeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeesIdPutValidateBeforeCall(id, employeeDTO, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employeesPost
     * @param employeeDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesPostCall(EmployeeDTO employeeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDTO;

        // create path and map variables
        String localVarPath = "/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employeesPostValidateBeforeCall(EmployeeDTO employeeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeDTO' is set
        if (employeeDTO == null) {
            throw new ApiException("Missing the required parameter 'employeeDTO' when calling employeesPost(Async)");
        }

        return employeesPostCall(employeeDTO, _callback);

    }

    /**
     * Přidá zaměstnance
     * 
     * @param employeeDTO  (required)
     * @return EmployeeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
     </table>
     */
    public EmployeeDTO employeesPost(EmployeeDTO employeeDTO) throws ApiException {
        ApiResponse<EmployeeDTO> localVarResp = employeesPostWithHttpInfo(employeeDTO);
        return localVarResp.getData();
    }

    /**
     * Přidá zaměstnance
     * 
     * @param employeeDTO  (required)
     * @return ApiResponse&lt;EmployeeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmployeeDTO> employeesPostWithHttpInfo(EmployeeDTO employeeDTO) throws ApiException {
        okhttp3.Call localVarCall = employeesPostValidateBeforeCall(employeeDTO, null);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Přidá zaměstnance (asynchronously)
     * 
     * @param employeeDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Úspěšná odpověď </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call employeesPostAsync(EmployeeDTO employeeDTO, final ApiCallback<EmployeeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = employeesPostValidateBeforeCall(employeeDTO, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
