/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EmployeeDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-15T08:17:49.553285600+02:00[Europe/Prague]")
@Validated
@Tag(name = "employees", description = "the employees API")
public interface EmployeesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /employees : Vrátí všechny zaměstnance
     *
     * @return Úspěšná odpověď (status code 200)
     *         or Obsah nenalezen (status code 204)
     */
    @Operation(
        operationId = "employeesGet",
        summary = "Vrátí všechny zaměstnance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspěšná odpověď", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EmployeeDTO.class)))
            }),
            @ApiResponse(responseCode = "204", description = "Obsah nenalezen")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees",
        produces = { "application/json" }
    )
    default ResponseEntity<List<EmployeeDTO>> employeesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"dateBirth\" : \"2000-01-23\", \"email\" : \"email\" }, { \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"dateBirth\" : \"2000-01-23\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /employees/{id} : Smaže zaměstnance podle ID
     *
     * @param id  (required)
     * @return Úspěšná odpověď (status code 200)
     *         or Zaměstnanec nenalezen (status code 404)
     */
    @Operation(
        operationId = "employeesIdDelete",
        summary = "Smaže zaměstnance podle ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspěšná odpověď", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Zaměstnanec nenalezen")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/employees/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<EmployeeDTO> employeesIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"dateBirth\" : \"2000-01-23\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees/{id} : Vrátí zaměstnance podle ID
     *
     * @param id  (required)
     * @return Úspěšná odpověď (status code 200)
     *         or Zaměstnanec nenalezen (status code 404)
     */
    @Operation(
        operationId = "employeesIdGet",
        summary = "Vrátí zaměstnance podle ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspěšná odpověď", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Zaměstnanec nenalezen")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<EmployeeDTO> employeesIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"dateBirth\" : \"2000-01-23\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /employees/{id} : Aktualizuje zaměstnance
     *
     * @param id  (required)
     * @param employeeDTO  (required)
     * @return Úspěšná odpověď (status code 200)
     *         or Zaměstnanec s daným ID nebyl nalezen (status code 400)
     */
    @Operation(
        operationId = "employeesIdPut",
        summary = "Aktualizuje zaměstnance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspěšná odpověď", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Zaměstnanec s daným ID nebyl nalezen")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/employees/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EmployeeDTO> employeesIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "EmployeeDTO", description = "", required = true) @Valid @RequestBody EmployeeDTO employeeDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"dateBirth\" : \"2000-01-23\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /employees : Přidá zaměstnance
     *
     * @param employeeDTO  (required)
     * @return Úspěšná odpověď (status code 200)
     */
    @Operation(
        operationId = "employeesPost",
        summary = "Přidá zaměstnance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspěšná odpověď", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employees",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EmployeeDTO> employeesPost(
        @Parameter(name = "EmployeeDTO", description = "", required = true) @Valid @RequestBody EmployeeDTO employeeDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"dateBirth\" : \"2000-01-23\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
